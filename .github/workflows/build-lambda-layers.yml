name: Build Lambda Layers

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment (dev/staging/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  build-ultimate-layers:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libfreetype6-dev \
            liblcms2-dev \
            libwebp-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libxcb1-dev \
            libffi-dev \
            libssl-dev \
            zlib1g-dev \
            libbz2-dev \
            libreadline-dev \
            libsqlite3-dev \
            libncursesw5-dev \
            xz-utils \
            tk-dev \
            libxml2-dev \
            libxmlsec1-dev \
            libffi-dev \
            liblzma-dev \
            libopenblas-dev \
            liblapack-dev \
            gfortran \
            libhdf5-dev \
            pkg-config \
            cmake \
            libgtk-3-dev \
            libavcodec-dev \
            libavformat-dev \
            libswscale-dev \
            libv4l-dev \
            libxvidcore-dev \
            libx264-dev \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libatlas-base-dev \
            gfortran \
            wget \
            unzip

      - name: Create S3 Folder Structure
        run: |
          echo "📁 Creating S3 folder structure..."
          
          # Create the layers folder in S3 (this creates the folder if it doesn't exist)
          echo "Creating stitch/layers/ folder in S3..."
          aws s3api put-object --bucket urgd-applicationdata --key stitch/layers/ --region us-west-2
          
          echo "✅ S3 folder structure created"

      - name: Build 2 Essential Layers
        run: |
          echo "🔥 Building 2 essential Lambda layers..."
          
          # List of all layers
          layers=("core-image" "svg-embroidery")
          
          # Build each layer
          for layer in "${layers[@]}"; do
            echo "🔥 Building $layer layer..."
            
            # Create build directory
            mkdir -p ${layer}-build
            cd ${layer}-build
            
            # Copy requirements
            cp ../layers/${layer}/requirements.txt .
            
            # Install Python dependencies
            pip install --upgrade pip setuptools wheel
            echo "⚡ Installing $layer dependencies..."
            pip install -r requirements.txt -t ./python/ --no-cache-dir
            
            # Create the layer zip
            echo "💥 Creating $layer layer package..."
            zip -r ${layer}.zip python/
            
            # Get the size
            LAYER_SIZE=$(du -h ${layer}.zip | cut -f1)
            echo "🎯 ${layer^^} LAYER BUILT! Size: $LAYER_SIZE"
            
            # Upload to S3
            aws s3 cp ${layer}.zip s3://urgd-applicationdata/stitch/layers/${layer}.zip --region us-west-2
            
            echo "🚀 ${layer^^} LAYER DEPLOYED TO S3!"
            
            # Go back to root
            cd ..
          done

      - name: Publish 2 Essential Layers
        run: |
          echo "🔥 Publishing 2 essential Lambda layers..."
          
          # List of all layers
          layers=("core-image" "svg-embroidery")
          
          # Publish each layer
          for layer in "${layers[@]}"; do
            echo "🔥 Publishing $layer layer..."
            
            # Create layer
            LAYER_ARN=$(aws lambda publish-layer-version \
              --layer-name urgd-${layer}-${{ github.event.inputs.environment }} \
              --description "${layer^} - ${{ github.event.inputs.environment }}" \
              --content S3Bucket=urgd-applicationdata,S3Key=stitch/layers/${layer}.zip \
              --compatible-runtimes python3.12 \
              --compatible-architectures x86_64 \
              --query 'LayerVersionArn' \
              --output text \
              --region us-west-2)
            
            echo "🎯 ${layer^} Layer ARN: $LAYER_ARN"
            echo "${layer^^}_LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV
          done

      - name: Output Layer Info
        run: |
          echo "🚀 2 ESSENTIAL LAMBDA LAYERS DEPLOYED!"
          echo "💪 Minimal focused Python layers ready!"
          echo "🔥 2 layers - under 250MB limit!"
          echo "⚡ Ready to power your Lambda functions!"
          echo ""
          echo "📝 Layer ARNs:"
          echo "  - $CORE_IMAGE_LAYER_ARN"
          echo "  - $SVG_EMBROIDERY_LAYER_ARN"
