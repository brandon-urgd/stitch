name: Deploy Stitch with CloudFormation

on:
  push:
    branches: [ main ]      # Auto-deploy to dev
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      confirm_prod:
        description: 'For PROD: Type "DEPLOY" to confirm'
        required: false
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve VERSION
        id: version
        run: |
          echo "🔍 Resolving VERSION..."
          
          if [ -f "VERSION" ]; then
            VERSION=$(cat VERSION | tr -d '\n\r')
            echo "✅ Found VERSION file: $VERSION"
          else
            # Use commit SHA as primary version for build-once, promote-many
            VERSION=$(git rev-parse --short HEAD)
            echo "✅ Using commit SHA as version: $VERSION"
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "✅ Resolved VERSION: $VERSION"

  deploy-layer:
    runs-on: ubuntu-latest
    needs: version
    outputs:
      layer_version: ${{ steps.upload_layer.outputs.LAYER_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}
      
      - name: Build Lambda Layer
        run: |
          VERSION="${{ needs.version.outputs.version }}"
          echo "🔨 Building Lambda layer for version: $VERSION"
          
          mkdir -p layer-build/python
          pip install -r layers/svg-embroidery/requirements.txt -t layer-build/python/
          
          cd layer-build
          zip -r ../svg-embroidery-layer-${VERSION}.zip python/
          cd ..
          
          echo "✅ Layer built: svg-embroidery-layer-${VERSION}.zip"
      
      - name: Upload Layer to S3
        id: upload_layer
        run: |
          VERSION="${{ needs.version.outputs.version }}"
          aws s3 cp svg-embroidery-layer-${VERSION}.zip \
            s3://urgd-applicationdata/stitch/layers/${VERSION}/svg-embroidery.zip \
            --region us-west-2
          
          echo "LAYER_VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "✅ Layer uploaded to s3://urgd-applicationdata/stitch/layers/${VERSION}/svg-embroidery.zip"

  deploy:
    runs-on: ubuntu-latest
    needs: [version, deploy-layer]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine environment
      id: env
      env:
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_INPUT_ENVIRONMENT: ${{ github.event.inputs.environment }}
      run: |
        # Check if this is a manual workflow dispatch first
        if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ] && [ -n "$GITHUB_INPUT_ENVIRONMENT" ]; then
          echo "ENVIRONMENT=$GITHUB_INPUT_ENVIRONMENT" >> $GITHUB_ENV
          if [ "$GITHUB_INPUT_ENVIRONMENT" = "prod" ]; then
            echo "WAF_ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "WAF_ENVIRONMENT=nonprod" >> $GITHUB_ENV
          fi
          echo "environment=$GITHUB_INPUT_ENVIRONMENT" >> $GITHUB_OUTPUT
        elif [ "$GITHUB_REF" = "refs/heads/main" ]; then
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "WAF_ENVIRONMENT=nonprod" >> $GITHUB_ENV
          echo "environment=dev" >> $GITHUB_OUTPUT
        else
          echo "❌ Invalid workflow trigger: $GITHUB_EVENT_NAME on $GITHUB_REF"
          echo "❌ Expected: push to main OR workflow_dispatch with environment input"
          exit 1
        fi
        echo "✅ Environment determined: ${{ env.ENVIRONMENT }}"

    - name: Validate Production Deployment
      if: github.event.inputs.environment == 'prod'
      env:
        GITHUB_INPUT_CONFIRM_PROD: ${{ github.event.inputs.confirm_prod }}
      run: |
        if [ "$GITHUB_INPUT_CONFIRM_PROD" != "DEPLOY" ]; then
          echo "❌ Production deployment requires confirmation. Please type 'DEPLOY' in the confirm_prod field."
          exit 1
        fi
        echo "✅ Production deployment confirmed"
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}

    - name: Generate parameter files
      if: github.event_name == 'push' || github.event.inputs.environment == 'dev'
      run: |
        VERSION="${{ needs.version.outputs.version }}"
        echo "📝 Generating parameter files for version: $VERSION"
        
        mkdir -p parameter-files
        
        for env in dev staging prod; do
          cat > parameter-files/$env.json << EOF
        [
          {"ParameterKey": "Environment", "ParameterValue": "$env"},
          {"ParameterKey": "GitCommit", "ParameterValue": "$VERSION"},
          {"ParameterKey": "StitchFunctionCodeKey", "ParameterValue": "stitch/artifacts/$VERSION/stitch-function-$VERSION.zip"},
          {"ParameterKey": "StitchLayerCodeKey", "ParameterValue": "stitch/layers/$VERSION/svg-embroidery.zip"},
          {"ParameterKey": "AcmCertArnApiRegion", "ParameterValue": "arn:aws:acm:us-west-2:198919428218:certificate/1527d0ac-b0e3-4d3b-b003-a3234ca35935"},
          {"ParameterKey": "AcmCertArnCloudFront", "ParameterValue": "arn:aws:acm:us-east-1:198919428218:certificate/1bb45d38-488a-4799-839c-2b9895da7f47"},
          {"ParameterKey": "UrgdDevHostedZoneId", "ParameterValue": "Z01725332W8W14423YXSC"},
          {"ParameterKey": "UrgdStudiosHostedZoneId", "ParameterValue": "Z0338626TGE7PTZDLIT1"}
        ]
        EOF
        done

    - name: Copy parameter files for promotions
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment != 'dev'
      run: |
        echo "📋 Copying parameter files from original dev build for promotion"
        
        # For promotions, we need to find the version that the current dev stack is using
        echo "🔍 Finding version used by current dev stack..."
        
        # Get the GitCommit parameter from the dev stack
        ORIGINAL_VERSION=$(aws cloudformation describe-stacks \
          --stack-name "urgd-stitch-dev" \
          --query 'Stacks[0].Parameters[?ParameterKey==`GitCommit`].ParameterValue' \
          --output text \
          --region us-west-2)
        
        if [ -z "$ORIGINAL_VERSION" ] || [ "$ORIGINAL_VERSION" = "None" ]; then
          echo "❌ Could not determine original version from dev stack"
          echo "🔍 Available parameters:"
          aws cloudformation describe-stacks \
            --stack-name "urgd-stitch-dev" \
            --query 'Stacks[0].Parameters' \
            --output table \
            --region us-west-2
          exit 1
        fi
        
        echo "✅ Found dev stack version: $ORIGINAL_VERSION"
        echo "🔄 PROMOTION LOGIC: Dev stack is using version $ORIGINAL_VERSION"
        echo "🔍 PROMOTION LOGIC: Will use parameter files from that same version for consistency"
        
        # Set environment variable for use in deployment step
        echo "ORIGINAL_VERSION=$ORIGINAL_VERSION" >> $GITHUB_ENV
        
        # Download parameter files from the original dev build
        mkdir -p parameter-files
        echo "📥 Downloading parameter files from original dev build version: $ORIGINAL_VERSION"
        aws s3 cp "s3://urgd-applicationdata/stitch/cloudformation/$ORIGINAL_VERSION/dev.json" "parameter-files/dev.json" --region us-west-2
        aws s3 cp "s3://urgd-applicationdata/stitch/cloudformation/$ORIGINAL_VERSION/staging.json" "parameter-files/staging.json" --region us-west-2
        aws s3 cp "s3://urgd-applicationdata/stitch/cloudformation/$ORIGINAL_VERSION/prod.json" "parameter-files/prod.json" --region us-west-2
        
        echo "✅ PROMOTION: Parameter files copied from dev stack version: $ORIGINAL_VERSION"
        echo "✅ PROMOTION: This ensures template and parameters reference the same version"
        
    - name: Prepare website files
      run: |
        echo "📁 Website files ready for upload to S3 bucket"
        
    - name: Build Lambda package
      run: |
        VERSION="${{ needs.version.outputs.version }}"
        echo "🔨 Building Lambda package for version: $VERSION"
        
        # Create artifacts directory
        mkdir -p artifacts
        
        # Create a temporary build directory
        BUILD_DIR="/tmp/lambda-build-stitch-${VERSION}"
        mkdir -p "$BUILD_DIR"
        
        # Copy Lambda function files
        cp -r lambdas/* "$BUILD_DIR/"
        
        # Install dependencies using pip
        cd "$BUILD_DIR"
        pip install -r requirements.txt -t .
        cd - > /dev/null
        
        # Create zip file from build directory
        cd "$BUILD_DIR"
        zip -r "/tmp/stitch-function-${VERSION}.zip" . -x "*.git*" "*.DS_Store*" "__pycache__/*" "*.pyc"
        cd - > /dev/null
        
        # Note: Layer dependencies will be available at runtime
        echo "✅ Lambda function package built successfully"
        echo "📦 Layer dependencies will be available at runtime"
        
        # Move to artifacts directory
        mv "/tmp/stitch-function-${VERSION}.zip" "artifacts/"
        
        # Clean up build directory
        rm -rf "$BUILD_DIR"
        
        echo "✅ Lambda package built: artifacts/stitch-function-${VERSION}.zip"
        echo "📦 Package size: $(du -h artifacts/stitch-function-${VERSION}.zip | cut -f1)"
        
    - name: Upload artifacts to S3
      run: |
        VERSION="${{ needs.version.outputs.version }}"
        echo "📦 Uploading artifacts for version: $VERSION"
        
        # Upload Lambda package to artifacts folder (broadcast style)
        aws s3 cp artifacts/stitch-function-${VERSION}.zip s3://urgd-applicationdata/stitch/artifacts/${VERSION}/stitch-function-${VERSION}.zip
        echo "✅ Lambda package uploaded to S3 artifacts folder"
        
        # Upload CloudFormation template to cloudformation folder
        # Upload versioned template and parameters to S3
        VERSION="${{ needs.version.outputs.version }}"
        echo "📤 Uploading CloudFormation template and parameters for version: $VERSION"
        
        aws s3 cp "cloudformation/stitch-infrastructure.yaml" \
          "s3://urgd-applicationdata/stitch/cloudformation/$VERSION/stitch-infrastructure.yaml" \
          --region us-west-2
        
        # Upload parameter files
        aws s3 cp "parameter-files/" \
          "s3://urgd-applicationdata/stitch/cloudformation/$VERSION/" \
          --recursive --region us-west-2
        echo "✅ Parameter files uploaded for version: $VERSION"
        
    - name: Deploy CloudFormation Stack
      id: cloudfront
      env:
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        ENV_ENVIRONMENT: ${{ env.ENVIRONMENT }}
      run: |
        VERSION="${{ needs.version.outputs.version }}"
        ENVIRONMENT="$ENV_ENVIRONMENT"
        STACK_NAME="urgd-stitch-$ENVIRONMENT"
        
        # Determine which version to use
        if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ] && [ "$ENVIRONMENT" != "dev" ]; then
          # This is a promotion - use the same version as dev stack
          PARAM_VERSION="${{ env.ORIGINAL_VERSION }}"
          echo "🚀 PROMOTION: Deploying $STACK_NAME with version: $PARAM_VERSION (from dev stack)"
        else
          # This is a dev build - use current version
          PARAM_VERSION="$VERSION"
          echo "🚀 DEV BUILD: Deploying $STACK_NAME with version: $PARAM_VERSION (from current commit)"
        fi
        
        # Download parameter file from S3 to temp location
        TEMP_PARAM_FILE="/tmp/${ENVIRONMENT}-${PARAM_VERSION}.json"
        aws s3 cp "s3://urgd-applicationdata/stitch/cloudformation/$PARAM_VERSION/$ENVIRONMENT.json" "$TEMP_PARAM_FILE" --region us-west-2
        
        # Deploy the stack
        if aws cloudformation describe-stacks --stack-name $STACK_NAME --region us-west-2 >/dev/null 2>&1; then
          echo "Stack exists, updating..."
          if aws cloudformation update-stack \
            --stack-name $STACK_NAME \
            --template-url "https://urgd-applicationdata.s3.us-west-2.amazonaws.com/stitch/cloudformation/$PARAM_VERSION/stitch-infrastructure.yaml" \
            --parameters file://$TEMP_PARAM_FILE \
            --capabilities CAPABILITY_NAMED_IAM \
            --region us-west-2 2>&1 | tee /tmp/update-output.log; then
            echo "✅ Stack update initiated"
            echo "⏳ Waiting for stack update to complete..."
            aws cloudformation wait stack-update-complete \
              --stack-name $STACK_NAME \
              --region us-west-2
          else
            # Check if the error is "No updates are to be performed"
            if grep -q "No updates are to be performed" /tmp/update-output.log; then
              echo "✅ Stack is already up to date - no changes needed"
            else
              echo "❌ Stack update failed"
              cat /tmp/update-output.log
              exit 1
            fi
          fi
        else
          echo "Stack does not exist, creating..."
          aws cloudformation create-stack \
            --stack-name $STACK_NAME \
            --template-url "https://urgd-applicationdata.s3.us-west-2.amazonaws.com/stitch/cloudformation/$PARAM_VERSION/stitch-infrastructure.yaml" \
            --parameters file://$TEMP_PARAM_FILE \
            --capabilities CAPABILITY_NAMED_IAM \
            --region us-west-2
          
          echo "⏳ Waiting for stack creation to complete..."
          aws cloudformation wait stack-create-complete \
            --stack-name $STACK_NAME \
            --region us-west-2
        fi
        
        # Clean up temp file
        rm -f "$TEMP_PARAM_FILE"
        
        echo "✅ Stitch stack $STACK_NAME deployed successfully"
        
        # Get CloudFront Distribution ID for WAF association
        STACK_NAME="urgd-stitch-${{ env.ENVIRONMENT }}"
        REGION="${{ secrets.AWS_REGION || 'us-west-2' }}"
        
        CLOUDFRONT_ID=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
          --output text)
        
        echo "CLOUDFRONT_ID=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
        echo "✅ CloudFront Distribution ID: $CLOUDFRONT_ID"

        
    - name: Upload website to S3
      run: |
        # Get the website bucket name directly from the stack
        WEBSITE_BUCKET=$(aws cloudformation describe-stacks \
          --stack-name urgd-stitch-${{ env.ENVIRONMENT }} \
          --query 'Stacks[0].Outputs[?OutputKey==`WebsiteBucketName`].OutputValue' \
          --output text)
        
        # Get the API Gateway URL from the stack and append /v1/convert/svg path
        API_BASE_URL=$(aws cloudformation describe-stacks \
          --stack-name urgd-stitch-${{ env.ENVIRONMENT }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
          --output text)
        API_URL="${API_BASE_URL}/v1/convert/svg"
        
        echo "Uploading website to bucket: $WEBSITE_BUCKET"
        echo "API Gateway URL: $API_URL"
        
        # Create a temporary directory for the website
        mkdir -p temp-website
        cp -r website/* temp-website/
        
        # Update the API URL in the website based on environment
        ENVIRONMENT="${{ env.ENVIRONMENT }}"
        if [ "$ENVIRONMENT" = "prod" ]; then
          API_URL="https://api.stitch.urgd.dev/v1/convert/svg"
          WEBSITE_URL="https://stitch.urgdstudios.com"
        else
          API_URL="https://api-${ENVIRONMENT}.stitch.urgd.dev/v1/convert/svg"
          WEBSITE_URL="https://${ENVIRONMENT}.stitch.urgdstudios.com"
        fi
        
        # Replace the API URL in the HTML file
        sed -i "s|https://api-dev.stitch.urgd.dev/v1/convert/svg|$API_URL|g" temp-website/index.html
        
        # Replace Open Graph URLs for social media previews
        sed -i "s|content=\"\"|content=\"$WEBSITE_URL\"|g" temp-website/index.html
        sed -i "s|href=\"\"|href=\"$WEBSITE_URL\"|g" temp-website/index.html
        sed -i "s|content=\"\"|content=\"$WEBSITE_URL/assets/urgd-logo.png\"|g" temp-website/index.html
        
        
        # Upload website files to the S3 website bucket
        aws s3 cp temp-website/ s3://$WEBSITE_BUCKET/ --recursive
        
        # Clean up
        rm -rf temp-website/
        
        echo "Website uploaded successfully with dynamic API URL!"
        
        
    - name: Configure AWS credentials (us-east-1)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Associate WAF with CloudFront
      id: waf
      if: steps.cloudfront.outputs.CLOUDFRONT_ID != ''
      run: |
        CLOUDFRONT_ID="${{ steps.cloudfront.outputs.CLOUDFRONT_ID }}"
        
        echo "🔗 Associating consolidated WAF with CloudFront..."
        
        WAF_SSM_PARAM="/urgd/waf/web_acl_arn"
        
        WAF_ARN=$(aws ssm get-parameter \
          --name "$WAF_SSM_PARAM" \
          --query 'Parameter.Value' \
          --output text \
          --region us-east-1)
        
        if [ "$WAF_ARN" = "None" ] || [ -z "$WAF_ARN" ]; then
          echo "❌ WAF ARN not found in SSM parameter: $WAF_SSM_PARAM"
          exit 1
        fi
        
        echo "✅ WAF ARN: $WAF_ARN"
        echo "WAF_ARN=$WAF_ARN" >> $GITHUB_OUTPUT
        echo "✅ CloudFront Distribution ID: $CLOUDFRONT_ID"
        
        # Get AWS Account ID
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text --region us-east-1)
        echo "✅ AWS Account ID: $AWS_ACCOUNT_ID"
        
        # Get the current distribution configuration
        echo "📋 Getting current distribution configuration..."
        aws cloudfront get-distribution-config \
          --id "$CLOUDFRONT_ID" \
          --region us-east-1 > /tmp/distribution-response.json
        
        ETAG=$(jq -r '.ETag' /tmp/distribution-response.json)
        echo "✅ ETag: $ETAG"
        
        # Extract the distribution config
        jq '.DistributionConfig' /tmp/distribution-response.json > /tmp/distribution-config.json
        
        # Add WAF to the distribution configuration
        echo "🔧 Adding WAF to distribution configuration..."
        jq --arg webacl "$WAF_ARN" '.WebACLId = $webacl' /tmp/distribution-config.json > /tmp/distribution-config-updated.json
        
        # Update the CloudFront distribution
        echo "🚀 Updating CloudFront distribution with WAF..."
        aws cloudfront update-distribution \
          --id "$CLOUDFRONT_ID" \
          --distribution-config file:///tmp/distribution-config-updated.json \
          --if-match "$ETAG" \
          --region us-east-1
        
        echo "✅ WAF successfully associated with CloudFront distribution"
        
    - name: Get deployment URLs
      run: |
        STACK_NAME="urgd-stitch-${{ env.ENVIRONMENT }}"
        REGION="${{ secrets.AWS_REGION || 'us-west-2' }}"
        CLOUDFRONT_ID="${{ steps.cloudfront.outputs.CLOUDFRONT_ID }}"
        WAF_ARN="${{ steps.waf.outputs.WAF_ARN }}"
        
        echo "🎉 Deployment Summary"
        echo "==================="
        echo "Stack Name: $STACK_NAME"
        echo "Region: $REGION"
        echo "CloudFront Distribution ID: $CLOUDFRONT_ID"
        echo "WAF ARN: $WAF_ARN"
        echo "Deployed by: $GITHUB_ACTOR"
        echo "Workflow run: $GITHUB_RUN_ID"
        echo "Commit: $GITHUB_SHA"
        echo ""
        echo "===================="
        
        # Get API Gateway URL (use custom domain if available)
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query 'Stacks[0].Outputs[?OutputKey==`CustomApiUrl`].OutputValue' \
          --output text)
        
        # Fallback to default API URL if custom domain not available
        if [ "$API_URL" == "None" ] || [ -z "$API_URL" ]; then
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region "$REGION" \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
        fi
        echo "🔗 API Gateway URL: $API_URL"
        
        # Get CloudFront URL (use custom domain if available)
        CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query 'Stacks[0].Outputs[?OutputKey==`CustomWebsiteUrl`].OutputValue' \
          --output text)
        
        # Fallback to default CloudFront URL if custom domain not available
        if [ "$CLOUDFRONT_URL" == "None" ] || [ -z "$CLOUDFRONT_URL" ]; then
          CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region "$REGION" \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontUrl`].OutputValue' \
            --output text)
        fi
        
        if [ "$CLOUDFRONT_URL" != "None" ] && [ -n "$CLOUDFRONT_URL" ]; then
          echo "☁️  CloudFront URL: $CLOUDFRONT_URL"
          echo "::notice::Stitch is deployed! Access it at: $CLOUDFRONT_URL"
        else
          echo "::notice::Stitch is deployed! Access it at: $API_URL"
        fi
