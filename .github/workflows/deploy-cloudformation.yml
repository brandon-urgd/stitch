name: Deploy Stitch with CloudFormation

on:
  push:
    branches: [ main ]      # Auto-deploy to dev
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      confirm_prod:
        description: 'For PROD: Type "DEPLOY" to confirm'
        required: false
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine environment
      id: env
      env:
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_INPUT_ENVIRONMENT: ${{ github.event.inputs.environment }}
      run: |
        # Check if this is a manual workflow dispatch first
        if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ] && [ -n "$GITHUB_INPUT_ENVIRONMENT" ]; then
          echo "ENVIRONMENT=$GITHUB_INPUT_ENVIRONMENT" >> $GITHUB_ENV
          if [ "$GITHUB_INPUT_ENVIRONMENT" = "prod" ]; then
            echo "WAF_ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "WAF_ENVIRONMENT=nonprod" >> $GITHUB_ENV
          fi
          echo "environment=$GITHUB_INPUT_ENVIRONMENT" >> $GITHUB_OUTPUT
        elif [ "$GITHUB_REF" = "refs/heads/main" ]; then
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "WAF_ENVIRONMENT=nonprod" >> $GITHUB_ENV
          echo "environment=dev" >> $GITHUB_OUTPUT
        else
          echo "❌ Invalid workflow trigger: $GITHUB_EVENT_NAME on $GITHUB_REF"
          echo "❌ Expected: push to main OR workflow_dispatch with environment input"
          exit 1
        fi
        echo "✅ Environment determined: ${{ env.ENVIRONMENT }}"

    - name: Validate Production Deployment
      if: github.event.inputs.environment == 'prod'
      env:
        GITHUB_INPUT_CONFIRM_PROD: ${{ github.event.inputs.confirm_prod }}
      run: |
        if [ "$GITHUB_INPUT_CONFIRM_PROD" != "DEPLOY" ]; then
          echo "❌ Production deployment requires confirmation. Please type 'DEPLOY' in the confirm_prod field."
          exit 1
        fi
        echo "✅ Production deployment confirmed"
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}
        
    - name: Prepare website files
      run: |
        echo "📁 Website files ready for upload to S3 bucket"
        
    - name: Build Lambda package
      run: |
        echo "🔨 Building Lambda package..."
        cd lambda
        pip install -r requirements.txt -t .
        zip -r ../lambda-package.zip .
        cd ..
        echo "✅ Lambda package built: lambda-package.zip"
        
    - name: Upload artifacts to S3
      run: |
        # Get current git commit hash
        GIT_COMMIT=$(git rev-parse --short HEAD)
        echo "📦 Git commit: $GIT_COMMIT"
        
        # Upload Lambda package to lambda folder
        aws s3 cp lambda-package.zip s3://urgd-applicationdata/stitch/lambda/lambda-${ENVIRONMENT}-${GIT_COMMIT}.zip
        echo "✅ Lambda package uploaded to S3 lambda folder"
        
        # Upload CloudFormation template to cloudformation folder
        aws s3 cp cloudformation/stitch-infrastructure.yaml s3://urgd-applicationdata/stitch/cloudformation/stitch-infrastructure.yaml
        echo "✅ CloudFormation template uploaded to S3 cloudformation folder"
        
    - name: Deploy CloudFormation Stack
      id: cloudfront
      run: |
        chmod +x scripts/deploy-cloudformation.sh
        ./scripts/deploy-cloudformation.sh ${{ env.ENVIRONMENT }}
        
        # Get CloudFront Distribution ID for WAF association
        STACK_NAME="urgd-stitch-${{ env.ENVIRONMENT }}"
        REGION="${{ secrets.AWS_REGION || 'us-west-2' }}"
        
        CLOUDFRONT_ID=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
          --output text)
        
        echo "CLOUDFRONT_ID=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
        echo "✅ CloudFront Distribution ID: $CLOUDFRONT_ID"

        
    - name: Upload website to S3
      run: |
        # Get the website bucket name directly from the stack
        WEBSITE_BUCKET=$(aws cloudformation describe-stacks \
          --stack-name urgd-stitch-${{ env.ENVIRONMENT }} \
          --query 'Stacks[0].Outputs[?OutputKey==`WebsiteBucketName`].OutputValue' \
          --output text)
        
        # Get the API Gateway URL from the stack and append /api path
        API_BASE_URL=$(aws cloudformation describe-stacks \
          --stack-name urgd-stitch-${{ env.ENVIRONMENT }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
          --output text)
        API_URL="${API_BASE_URL}/api"
        
        echo "Uploading website to bucket: $WEBSITE_BUCKET"
        echo "API Gateway URL: $API_URL"
        
        # Create a temporary directory for the website
        mkdir -p temp-website
        cp -r website/* temp-website/
        
        # Update the API URL in the website based on environment
        ENVIRONMENT="${{ env.ENVIRONMENT }}"
        if [ "$ENVIRONMENT" = "prod" ]; then
          API_URL="https://api-prod.stitch.urgd.dev/prod/api"
        else
          API_URL="https://api-${ENVIRONMENT}.stitch.urgd.dev/${ENVIRONMENT}/api"
        fi
        
        # Replace the API URL in the HTML file
        sed -i "s|https://api-dev.stitch.urgd.dev/dev/api|$API_URL|g" temp-website/index.html
        
        
        # Upload website files to the S3 website bucket
        aws s3 cp temp-website/ s3://$WEBSITE_BUCKET/ --recursive
        
        # Clean up
        rm -rf temp-website/
        
        echo "Website uploaded successfully with dynamic API URL!"
        
        
    - name: Configure AWS credentials (us-east-1)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Associate WAF with CloudFront
      id: waf
      if: steps.cloudfront.outputs.CLOUDFRONT_ID != ''
      run: |
        ENVIRONMENT="${{ env.ENVIRONMENT }}"
        WAF_ENVIRONMENT="${{ env.WAF_ENVIRONMENT }}"
        CLOUDFRONT_ID="${{ steps.cloudfront.outputs.CLOUDFRONT_ID }}"
        
        echo "🔗 Associating WAF with CloudFront..."
        
        # Use environment-aware WAF
        WAF_SSM_PARAM="/urgd/waf/$WAF_ENVIRONMENT/web_acl_arn"
        
        WAF_ARN=$(aws ssm get-parameter \
          --name "$WAF_SSM_PARAM" \
          --query 'Parameter.Value' \
          --output text \
          --region us-east-1)
        
        if [ "$WAF_ARN" = "None" ] || [ -z "$WAF_ARN" ]; then
          echo "❌ WAF ARN not found in SSM parameter: $WAF_SSM_PARAM"
          exit 1
        fi
        
        echo "✅ WAF ARN: $WAF_ARN"
        echo "WAF_ARN=$WAF_ARN" >> $GITHUB_OUTPUT
        echo "✅ CloudFront Distribution ID: $CLOUDFRONT_ID"
        
        # Get AWS Account ID
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text --region us-east-1)
        echo "✅ AWS Account ID: $AWS_ACCOUNT_ID"
        
        # Get the current distribution configuration
        echo "📋 Getting current distribution configuration..."
        aws cloudfront get-distribution-config \
          --id "$CLOUDFRONT_ID" \
          --region us-east-1 > /tmp/distribution-response.json
        
        ETAG=$(jq -r '.ETag' /tmp/distribution-response.json)
        echo "✅ ETag: $ETAG"
        
        # Extract the distribution config
        jq '.DistributionConfig' /tmp/distribution-response.json > /tmp/distribution-config.json
        
        # Add WAF to the distribution configuration
        echo "🔧 Adding WAF to distribution configuration..."
        jq --arg webacl "$WAF_ARN" '.WebACLId = $webacl' /tmp/distribution-config.json > /tmp/distribution-config-updated.json
        
        # Update the CloudFront distribution
        echo "🚀 Updating CloudFront distribution with WAF..."
        aws cloudfront update-distribution \
          --id "$CLOUDFRONT_ID" \
          --distribution-config file:///tmp/distribution-config-updated.json \
          --if-match "$ETAG" \
          --region us-east-1
        
        echo "✅ WAF successfully associated with CloudFront distribution"
        
    - name: Get deployment URLs
      run: |
        STACK_NAME="urgd-stitch-${{ env.ENVIRONMENT }}"
        REGION="${{ secrets.AWS_REGION || 'us-west-2' }}"
        CLOUDFRONT_ID="${{ steps.cloudfront.outputs.CLOUDFRONT_ID }}"
        WAF_ARN="${{ steps.waf.outputs.WAF_ARN }}"
        
        echo "🎉 Deployment Summary"
        echo "==================="
        echo "Stack Name: $STACK_NAME"
        echo "Region: $REGION"
        echo "CloudFront Distribution ID: $CLOUDFRONT_ID"
        echo "WAF ARN: $WAF_ARN"
        echo "Deployed by: $GITHUB_ACTOR"
        echo "Workflow run: $GITHUB_RUN_ID"
        echo "Commit: $GITHUB_SHA"
        echo ""
        echo "===================="
        
        # Get API Gateway URL (use custom domain if available)
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query 'Stacks[0].Outputs[?OutputKey==`CustomApiUrl`].OutputValue' \
          --output text)
        
        # Fallback to default API URL if custom domain not available
        if [ "$API_URL" == "None" ] || [ -z "$API_URL" ]; then
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region "$REGION" \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
        fi
        echo "🔗 API Gateway URL: $API_URL"
        
        # Get CloudFront URL (use custom domain if available)
        CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query 'Stacks[0].Outputs[?OutputKey==`CustomWebsiteUrl`].OutputValue' \
          --output text)
        
        # Fallback to default CloudFront URL if custom domain not available
        if [ "$CLOUDFRONT_URL" == "None" ] || [ -z "$CLOUDFRONT_URL" ]; then
          CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --region "$REGION" \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontUrl`].OutputValue' \
            --output text)
        fi
        
        if [ "$CLOUDFRONT_URL" != "None" ] && [ -n "$CLOUDFRONT_URL" ]; then
          echo "☁️  CloudFront URL: $CLOUDFRONT_URL"
          echo "::notice::Stitch is deployed! Access it at: $CLOUDFRONT_URL"
        else
          echo "::notice::Stitch is deployed! Access it at: $API_URL"
        fi
