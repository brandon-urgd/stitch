name: Deploy Stitch with CloudFormation

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}
        
    - name: Install dependencies
      run: |
        cd lambda
        pip install -r requirements.txt
        
    - name: Create Lambda layer
      run: |
        mkdir -p layer/python
        cd lambda
        pip install -r requirements.txt -t ../layer/python/
        cd ../layer
        zip -r ../layer.zip .
        
    - name: Create Lambda deployment package
      run: |
        cd lambda
        zip -r ../lambda_function.zip .
        
    - name: Upload artifacts to S3
      run: |
        # Create S3 bucket if it doesn't exist
        aws s3api head-bucket --bucket urgd-stitch-storage-${{ secrets.AWS_ACCOUNT_ID }} 2>/dev/null || \
        aws s3 mb s3://urgd-stitch-storage-${{ secrets.AWS_ACCOUNT_ID }} --region ${{ secrets.AWS_REGION || 'us-west-2' }}
        
        # Upload Lambda function code
        aws s3 cp lambda_function.zip s3://urgd-stitch-storage-${{ secrets.AWS_ACCOUNT_ID }}/lambda/stitch-function.zip
        
        # Upload Lambda layer
        aws s3 cp layer.zip s3://urgd-stitch-storage-${{ secrets.AWS_ACCOUNT_ID }}/layers/stitch-libs.zip
        
    - name: Deploy CloudFormation Stack
      run: |
        chmod +x scripts/deploy-cloudformation.sh
        ./scripts/deploy-cloudformation.sh
        
    - name: Get deployment URLs
      run: |
        STACK_NAME="stitch-infrastructure"
        REGION="${{ secrets.AWS_REGION || 'us-west-2' }}"
        
        echo "üìã Deployment Summary:"
        echo "===================="
        
        # Get Function URL
        FUNCTION_URL=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query 'Stacks[0].Outputs[?OutputKey==`FunctionUrl`].OutputValue' \
          --output text)
        echo "üîó Function URL: $FUNCTION_URL"
        
        # Get CloudFront URL
        CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontUrl`].OutputValue' \
          --output text)
        
        if [ "$CLOUDFRONT_URL" != "None" ] && [ -n "$CLOUDFRONT_URL" ]; then
          echo "‚òÅÔ∏è  CloudFront URL: $CLOUDFRONT_URL"
        fi
        
        # Get Custom Domain URL
        CUSTOM_DOMAIN=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "$REGION" \
          --query 'Stacks[0].Outputs[?OutputKey==`CustomDomainUrl`].OutputValue' \
          --output text)
        
        if [ "$CUSTOM_DOMAIN" != "None" ] && [ -n "$CUSTOM_DOMAIN" ]; then
          echo "üåê Custom Domain: $CUSTOM_DOMAIN"
          echo "::notice::Stitch is deployed! Access it at: $CUSTOM_DOMAIN"
        else
          echo "::notice::Stitch is deployed! Access it at: $FUNCTION_URL"
        fi
