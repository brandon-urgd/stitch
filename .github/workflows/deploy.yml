name: Deploy Stitch Lambda

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}
        
    - name: Install dependencies
      run: |
        cd lambda
        pip install -r requirements.txt
        
    - name: Create Lambda layer
      run: |
        mkdir -p layer/python
        cd lambda
        pip install -r requirements.txt -t ../layer/python/
        cd ../layer
        zip -r ../layer.zip .
        
    - name: Create Lambda deployment package
      run: |
        cd lambda
        zip -r ../lambda_function.zip .
        
    - name: Create S3 bucket if not exists
      run: |
        aws s3api head-bucket --bucket urgd-stitch-storage 2>/dev/null || \
        aws s3 mb s3://urgd-stitch-storage --region ${{ secrets.AWS_REGION || 'us-west-2' }}
        
    - name: Configure S3 bucket lifecycle
      run: |
        cat > lifecycle.json << EOF
        {
          "Rules": [
            {
              "ID": "DeleteTempFiles",
              "Status": "Enabled",
              "Filter": {
                "Prefix": "temp/"
              },
              "Expiration": {
                "Days": 1
              }
            }
          ]
        }
        EOF
        # Only set lifecycle if bucket exists and doesn't already have this config
        if aws s3api head-bucket --bucket urgd-stitch-storage 2>/dev/null; then
          aws s3api put-bucket-lifecycle-configuration \
            --bucket urgd-stitch-storage \
            --lifecycle-configuration file://lifecycle.json
        fi
          
    - name: Create or update Lambda layer
      run: |
        # Check if layer exists first
        if aws lambda get-layer-version --layer-name urgd-stitch-libs --version-number 1 >/dev/null 2>&1; then
          echo "Layer already exists, using version 1"
          echo "LAYER_VERSION=1" >> $GITHUB_ENV
        else
          # Try to create layer, fall back to no layer if permission denied
          if LAYER_VERSION=$(aws lambda publish-layer-version \
            --layer-name urgd-stitch-libs \
            --zip-file fileb://layer.zip \
            --compatible-runtimes python3.11 \
            --query 'Version' --output text 2>/dev/null); then
            echo "LAYER_VERSION=$LAYER_VERSION" >> $GITHUB_ENV
            echo "Layer created successfully"
          else
            echo "Warning: Could not create Lambda layer (permission denied). Continuing without layer."
            echo "LAYER_VERSION=" >> $GITHUB_ENV
          fi
        fi
        
    - name: Create or update Lambda function
      run: |
        # Check if function exists
        if aws lambda get-function --function-name urgd-stitch >/dev/null 2>&1; then
          # Update existing function
          aws lambda update-function-code \
            --function-name urgd-stitch \
            --zip-file fileb://lambda_function.zip
          
          # Only add layer if it was created successfully
          if [ -n "$LAYER_VERSION" ]; then
            aws lambda update-function-configuration \
              --function-name urgd-stitch \
              --layers arn:aws:lambda:${{ secrets.AWS_REGION || 'us-west-2' }}:${{ secrets.AWS_ACCOUNT_ID }}:layer:urgd-stitch-libs:$LAYER_VERSION \
              --memory-size 512 \
              --timeout 30
          else
            aws lambda update-function-configuration \
              --function-name urgd-stitch \
              --memory-size 512 \
              --timeout 30
          fi
        else
          # Create new function
          if [ -n "$LAYER_VERSION" ]; then
            aws lambda create-function \
              --function-name urgd-stitch \
              --runtime python3.11 \
              --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambda-execution-role \
              --handler lambda_function.lambda_handler \
              --zip-file fileb://lambda_function.zip \
              --layers arn:aws:lambda:${{ secrets.AWS_REGION || 'us-west-2' }}:${{ secrets.AWS_ACCOUNT_ID }}:layer:urgd-stitch-libs:$LAYER_VERSION \
              --memory-size 512 \
              --timeout 30
          else
            aws lambda create-function \
              --function-name urgd-stitch \
              --runtime python3.11 \
              --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambda-execution-role \
              --handler lambda_function.lambda_handler \
              --zip-file fileb://lambda_function.zip \
              --memory-size 512 \
              --timeout 30
          fi
        fi
        
    - name: Create Lambda execution role
      run: |
        # Create trust policy
        cat > trust-policy.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        EOF
        
        # Create role if it doesn't exist
        if ! aws iam get-role --role-name lambda-execution-role >/dev/null 2>&1; then
          aws iam create-role \
            --role-name lambda-execution-role \
            --assume-role-policy-document file://trust-policy.json
        fi
          
        # Attach policies (idempotent - won't fail if already attached)
        aws iam attach-role-policy \
          --role-name lambda-execution-role \
          --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || true
          
        # Create S3 policy
        cat > s3-policy.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject"
              ],
              "Resource": "arn:aws:s3:::urgd-stitch-storage/*"
            }
          ]
        }
        EOF
        
        # Update role policy (will overwrite if exists)
        aws iam put-role-policy \
          --role-name lambda-execution-role \
          --policy-name S3Access \
          --policy-document file://s3-policy.json
          
    - name: Create or update Function URL
      run: |
        # Check if Function URL exists
        if aws lambda get-function-url-config --function-name urgd-stitch >/dev/null 2>&1; then
          echo "Function URL already exists"
        else
          # Create Function URL
          aws lambda create-function-url-config \
            --function-name urgd-stitch \
            --auth-type NONE \
            --cors '{
              "AllowCredentials": false,
              "AllowHeaders": ["*"],
              "AllowMethods": ["*"],
              "AllowOrigins": ["*"],
              "ExposeHeaders": [],
              "MaxAge": 86400
            }'
        fi
        
    - name: Get Function URL
      run: |
        FUNCTION_URL=$(aws lambda get-function-url-config \
          --function-name urgd-stitch \
          --query 'FunctionUrl' --output text)
        echo "Function URL: $FUNCTION_URL"
        echo "::notice::Stitch is deployed! Access it at: $FUNCTION_URL"
