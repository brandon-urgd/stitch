name: Build Ultimate Badass Lambda Layer (Manual)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to build layer for (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      force_rebuild:
        description: 'Force rebuild even if layer exists'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  id-token: write

jobs:
  build-ultimate-layer:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Give it time to build the beast
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}

    - name: Install system dependencies (NUCLEAR OPTION)
      run: |
        echo "🚀 Installing system dependencies for ultimate layer..."
        sudo apt-get update
        sudo apt-get install -y \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libwebp-dev \
          libopenjp2-7-dev \
          libopenjp2-7 \
          libopencv-dev \
          libopencv-contrib-dev \
          libopenblas-dev \
          liblapack-dev \
          libatlas-base-dev \
          libgfortran5 \
          gfortran \
          libhdf5-dev \
          libhdf5-serial-dev \
          libprotobuf-dev \
          protobuf-compiler \
          libcairo2-dev \
          libpango1.0-dev \
          libgdk-pixbuf2.0-dev \
          libglib2.0-dev \
          libffi-dev \
          libssl-dev \
          libbz2-dev \
          liblzma-dev \
          libreadline-dev \
          libsqlite3-dev \
          libncurses5-dev \
          build-essential \
          cmake \
          pkg-config \
          libxml2-dev \
          libxslt1-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libx11-dev \
          libxext-dev \
          libxrender-dev \
          tcl-dev \
          tk-dev

    - name: Build Ultimate Badass Lambda Layer
      run: |
        echo "🔥 Building the most badass Lambda layer ever..."
        
        # Create build directory
        mkdir -p ultimate-layer-build
        cd ultimate-layer-build
        
        # Copy requirements
        cp ../layers/ultimate-dependencies/requirements.txt .
        
        # Install Python dependencies with MAXIMUM POWER
        pip install --upgrade pip setuptools wheel
        echo "⚡ Installing Python dependencies (this will take a while)..."
        pip install -r requirements.txt -t ./python/ --no-cache-dir
        
        # Create the ultimate layer zip
        echo "💥 Creating the ultimate layer package..."
        zip -r ultimate-dependencies.zip python/
        
        # Get the size
        LAYER_SIZE=$(du -h ultimate-dependencies.zip | cut -f1)
        echo "🎯 ULTIMATE LAYER BUILT! Size: $LAYER_SIZE"
        
        # Upload to S3
        aws s3 cp ultimate-dependencies.zip s3://urgd-applicationdata/stitch/layers/ultimate-dependencies.zip --region us-west-2
        
        echo "🚀 ULTIMATE LAYER DEPLOYED TO S3!"
        echo "💪 Ready to process images like a BOSS!"

    - name: Publish Ultimate Layer
      run: |
        # Create a new Lambda layer version
        LAYER_ARN=$(aws lambda publish-layer-version \
          --layer-name urgd-ultimate-dependencies-${{ github.event.inputs.environment }} \
          --description "The most badass, high-powered Lambda layer ever built - ${{ github.event.inputs.environment }}" \
          --content S3Bucket=urgd-applicationdata,S3Key=stitch/layers/ultimate-dependencies.zip \
          --compatible-runtimes python3.12 \
          --compatible-architectures x86_64 \
          --query 'LayerVersionArn' \
          --output text \
          --region us-west-2)
        
        echo "🎯 Layer ARN: $LAYER_ARN"
        echo "LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV
        echo "🚀 ULTIMATE LAMBDA LAYER DEPLOYED!"
        echo "💪 Layer ARN: $LAYER_ARN"
        echo "🔥 Ready to power your Lambda functions!"
        echo "⚡ This layer contains the most powerful image processing tools ever assembled!"

    - name: Output Layer Info
      run: |
        echo "🚀 ULTIMATE LAMBDA LAYER DEPLOYED!"
        echo "💪 Layer ARN: $LAYER_ARN"
        echo "🔥 Ready to power your Lambda functions!"
        echo "⚡ This layer contains the most powerful image processing tools ever assembled!"
        echo ""
        echo "📝 To use this layer in your Lambda functions:"
        echo "   Layers:"
        echo "     - $LAYER_ARN"
