name: Build Ultimate Badass Lambda Layer (Manual)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to build layer for (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      force_rebuild:
        description: 'Force rebuild even if layer exists'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  id-token: write

jobs:
  build-ultimate-layer:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Give it time to build the beast
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}

    - name: Install system dependencies (NUCLEAR OPTION)
      run: |
        echo "🚀 Installing system dependencies for ultimate layer..."
        sudo apt-get update
        sudo apt-get install -y \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libwebp-dev \
          libopenjp2-7-dev \
          libopenjp2-7 \
          libopencv-dev \
          libopencv-contrib-dev \
          libopenblas-dev \
          liblapack-dev \
          libatlas-base-dev \
          libgfortran5 \
          gfortran \
          libhdf5-dev \
          libhdf5-serial-dev \
          libprotobuf-dev \
          protobuf-compiler \
          libcairo2-dev \
          libpango1.0-dev \
          libgdk-pixbuf2.0-dev \
          libglib2.0-dev \
          libffi-dev \
          libssl-dev \
          libbz2-dev \
          liblzma-dev \
          libreadline-dev \
          libsqlite3-dev \
          libncurses5-dev \
          build-essential \
          cmake \
          pkg-config \
          libxml2-dev \
          libxslt1-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libx11-dev \
          libxext-dev \
          libxrender-dev \
          tcl-dev \
          tk-dev

    - name: Build Core Image Layer
      run: |
        echo "🔥 Building Core Image Layer (smallest)..."
        
        # Create build directory
        mkdir -p core-image-build
        cd core-image-build
        
        # Copy requirements
        cp ../layers/core-image/requirements.txt .
        
        # Install Python dependencies
        pip install --upgrade pip setuptools wheel
        echo "⚡ Installing core image dependencies..."
        pip install -r requirements.txt -t ./python/ --no-cache-dir
        
        # Create the layer zip
        echo "💥 Creating core image layer package..."
        zip -r core-image.zip python/
        
        # Get the size
        LAYER_SIZE=$(du -h core-image.zip | cut -f1)
        echo "🎯 CORE IMAGE LAYER BUILT! Size: $LAYER_SIZE"
        
        # Upload to S3
        aws s3 cp core-image.zip s3://urgd-applicationdata/stitch/layers/core-image.zip --region us-west-2
        
        echo "🚀 CORE IMAGE LAYER DEPLOYED TO S3!"

    - name: Build OpenCV Core Layer
      run: |
        echo "🔥 Building OpenCV Core Layer (smallest)..."
        
        # Create build directory
        mkdir -p opencv-core-build
        cd opencv-core-build
        
        # Copy requirements
        cp ../layers/opencv-core/requirements.txt .
        
        # Install Python dependencies
        pip install --upgrade pip setuptools wheel
        echo "⚡ Installing OpenCV core dependencies..."
        pip install -r requirements.txt -t ./python/ --no-cache-dir
        
        # Create the layer zip
        echo "💥 Creating OpenCV core layer package..."
        zip -r opencv-core.zip python/
        
        # Get the size
        LAYER_SIZE=$(du -h opencv-core.zip | cut -f1)
        echo "🎯 OPENCV CORE LAYER BUILT! Size: $LAYER_SIZE"
        
        # Upload to S3
        aws s3 cp opencv-core.zip s3://urgd-applicationdata/stitch/layers/opencv-core.zip --region us-west-2
        
        echo "🚀 OPENCV CORE LAYER DEPLOYED TO S3!"

    - name: Build Advanced Image Layer
      run: |
        echo "🔥 Building Advanced Image Layer (medium)..."
        
        # Create build directory
        mkdir -p advanced-image-build
        cd advanced-image-build
        
        # Copy requirements
        cp ../layers/advanced-image/requirements.txt .
        
        # Install Python dependencies
        pip install --upgrade pip setuptools wheel
        echo "⚡ Installing advanced image dependencies..."
        pip install -r requirements.txt -t ./python/ --no-cache-dir
        
        # Create the layer zip
        echo "💥 Creating advanced image layer package..."
        zip -r advanced-image.zip python/
        
        # Get the size
        LAYER_SIZE=$(du -h advanced-image.zip | cut -f1)
        echo "🎯 ADVANCED IMAGE LAYER BUILT! Size: $LAYER_SIZE"
        
        # Upload to S3
        aws s3 cp advanced-image.zip s3://urgd-applicationdata/stitch/layers/advanced-image.zip --region us-west-2
        
        echo "🚀 ADVANCED IMAGE LAYER DEPLOYED TO S3!"

    - name: Build ML Core Layer
      run: |
        echo "🔥 Building ML Core Layer (small)..."
        
        # Create build directory
        mkdir -p ml-core-build
        cd ml-core-build
        
        # Copy requirements
        cp ../layers/ml-core/requirements.txt .
        
        # Install Python dependencies
        pip install --upgrade pip setuptools wheel
        echo "⚡ Installing ML core dependencies..."
        pip install -r requirements.txt -t ./python/ --no-cache-dir
        
        # Create the layer zip
        echo "💥 Creating ML core layer package..."
        zip -r ml-core.zip python/
        
        # Get the size
        LAYER_SIZE=$(du -h ml-core.zip | cut -f1)
        echo "🎯 ML CORE LAYER BUILT! Size: $LAYER_SIZE"
        
        # Upload to S3
        aws s3 cp ml-core.zip s3://urgd-applicationdata/stitch/layers/ml-core.zip --region us-west-2
        
        echo "🚀 ML CORE LAYER DEPLOYED TO S3!"

    - name: Build Data Viz Layer
      run: |
        echo "🔥 Building Data Viz Layer (medium)..."
        
        # Create build directory
        mkdir -p data-viz-build
        cd data-viz-build
        
        # Copy requirements
        cp ../layers/data-viz/requirements.txt .
        
        # Install Python dependencies
        pip install --upgrade pip setuptools wheel
        echo "⚡ Installing data viz dependencies..."
        pip install -r requirements.txt -t ./python/ --no-cache-dir
        
        # Create the layer zip
        echo "💥 Creating data viz layer package..."
        zip -r data-viz.zip python/
        
        # Get the size
        LAYER_SIZE=$(du -h data-viz.zip | cut -f1)
        echo "🎯 DATA VIZ LAYER BUILT! Size: $LAYER_SIZE"
        
        # Upload to S3
        aws s3 cp data-viz.zip s3://urgd-applicationdata/stitch/layers/data-viz.zip --region us-west-2
        
        echo "🚀 DATA VIZ LAYER DEPLOYED TO S3!"

    - name: Build Graphics Render Layer
      run: |
        echo "🔥 Building Graphics Render Layer (small)..."
        
        # Create build directory
        mkdir -p graphics-render-build
        cd graphics-render-build
        
        # Copy requirements
        cp ../layers/graphics-render/requirements.txt .
        
        # Install Python dependencies
        pip install --upgrade pip setuptools wheel
        echo "⚡ Installing graphics render dependencies..."
        pip install -r requirements.txt -t ./python/ --no-cache-dir
        
        # Create the layer zip
        echo "💥 Creating graphics render layer package..."
        zip -r graphics-render.zip python/
        
        # Get the size
        LAYER_SIZE=$(du -h graphics-render.zip | cut -f1)
        echo "🎯 GRAPHICS RENDER LAYER BUILT! Size: $LAYER_SIZE"
        
        # Upload to S3
        aws s3 cp graphics-render.zip s3://urgd-applicationdata/stitch/layers/graphics-render.zip --region us-west-2
        
        echo "🚀 GRAPHICS RENDER LAYER DEPLOYED TO S3!"

    - name: Publish Core Image Layer
      run: |
        # Create Core Image layer
        CORE_IMAGE_LAYER_ARN=$(aws lambda publish-layer-version \
          --layer-name urgd-core-image-${{ github.event.inputs.environment }} \
          --description "Core image processing and SVG tools - ${{ github.event.inputs.environment }}" \
          --content S3Bucket=urgd-applicationdata,S3Key=stitch/layers/core-image.zip \
          --compatible-runtimes python3.12 \
          --compatible-architectures x86_64 \
          --query 'LayerVersionArn' \
          --output text \
          --region us-west-2)
        
        echo "🎯 Core Image Layer ARN: $CORE_IMAGE_LAYER_ARN"
        echo "CORE_IMAGE_LAYER_ARN=$CORE_IMAGE_LAYER_ARN" >> $GITHUB_ENV

    - name: Publish OpenCV Core Layer
      run: |
        # Create OpenCV Core layer
        OPENCV_CORE_LAYER_ARN=$(aws lambda publish-layer-version \
          --layer-name urgd-opencv-core-${{ github.event.inputs.environment }} \
          --description "OpenCV core and essential image processing - ${{ github.event.inputs.environment }}" \
          --content S3Bucket=urgd-applicationdata,S3Key=stitch/layers/opencv-core.zip \
          --compatible-runtimes python3.12 \
          --compatible-architectures x86_64 \
          --query 'LayerVersionArn' \
          --output text \
          --region us-west-2)
        
        echo "🎯 OpenCV Core Layer ARN: $OPENCV_CORE_LAYER_ARN"
        echo "OPENCV_CORE_LAYER_ARN=$OPENCV_CORE_LAYER_ARN" >> $GITHUB_ENV

    - name: Publish Advanced Image Layer
      run: |
        # Create Advanced Image layer
        ADVANCED_IMAGE_LAYER_ARN=$(aws lambda publish-layer-version \
          --layer-name urgd-advanced-image-${{ github.event.inputs.environment }} \
          --description "Advanced image analysis and specialized formats - ${{ github.event.inputs.environment }}" \
          --content S3Bucket=urgd-applicationdata,S3Key=stitch/layers/advanced-image.zip \
          --compatible-runtimes python3.12 \
          --compatible-architectures x86_64 \
          --query 'LayerVersionArn' \
          --output text \
          --region us-west-2)
        
        echo "🎯 Advanced Image Layer ARN: $ADVANCED_IMAGE_LAYER_ARN"
        echo "ADVANCED_IMAGE_LAYER_ARN=$ADVANCED_IMAGE_LAYER_ARN" >> $GITHUB_ENV

    - name: Publish ML Core Layer
      run: |
        # Create ML Core layer
        ML_CORE_LAYER_ARN=$(aws lambda publish-layer-version \
          --layer-name urgd-ml-core-${{ github.event.inputs.environment }} \
          --description "Machine learning core tools - ${{ github.event.inputs.environment }}" \
          --content S3Bucket=urgd-applicationdata,S3Key=stitch/layers/ml-core.zip \
          --compatible-runtimes python3.12 \
          --compatible-architectures x86_64 \
          --query 'LayerVersionArn' \
          --output text \
          --region us-west-2)
        
        echo "🎯 ML Core Layer ARN: $ML_CORE_LAYER_ARN"
        echo "ML_CORE_LAYER_ARN=$ML_CORE_LAYER_ARN" >> $GITHUB_ENV

    - name: Publish Data Viz Layer
      run: |
        # Create Data Viz layer
        DATA_VIZ_LAYER_ARN=$(aws lambda publish-layer-version \
          --layer-name urgd-data-viz-${{ github.event.inputs.environment }} \
          --description "Data visualization and analysis - ${{ github.event.inputs.environment }}" \
          --content S3Bucket=urgd-applicationdata,S3Key=stitch/layers/data-viz.zip \
          --compatible-runtimes python3.12 \
          --compatible-architectures x86_64 \
          --query 'LayerVersionArn' \
          --output text \
          --region us-west-2)
        
        echo "🎯 Data Viz Layer ARN: $DATA_VIZ_LAYER_ARN"
        echo "DATA_VIZ_LAYER_ARN=$DATA_VIZ_LAYER_ARN" >> $GITHUB_ENV

    - name: Publish Graphics Render Layer
      run: |
        # Create Graphics Render layer
        GRAPHICS_RENDER_LAYER_ARN=$(aws lambda publish-layer-version \
          --layer-name urgd-graphics-render-${{ github.event.inputs.environment }} \
          --description "Graphics and document rendering - ${{ github.event.inputs.environment }}" \
          --content S3Bucket=urgd-applicationdata,S3Key=stitch/layers/graphics-render.zip \
          --compatible-runtimes python3.12 \
          --compatible-architectures x86_64 \
          --query 'LayerVersionArn' \
          --output text \
          --region us-west-2)
        
        echo "🎯 Graphics Render Layer ARN: $GRAPHICS_RENDER_LAYER_ARN"
        echo "GRAPHICS_RENDER_LAYER_ARN=$GRAPHICS_RENDER_LAYER_ARN" >> $GITHUB_ENV

    - name: Output Layer Info
      run: |
        echo "🚀 ALL SIX LAMBDA LAYERS DEPLOYED!"
        echo "💪 Core Image Layer ARN: $CORE_IMAGE_LAYER_ARN"
        echo "💪 OpenCV Core Layer ARN: $OPENCV_CORE_LAYER_ARN"
        echo "💪 Advanced Image Layer ARN: $ADVANCED_IMAGE_LAYER_ARN"
        echo "💪 ML Core Layer ARN: $ML_CORE_LAYER_ARN"
        echo "💪 Data Viz Layer ARN: $DATA_VIZ_LAYER_ARN"
        echo "💪 Graphics Render Layer ARN: $GRAPHICS_RENDER_LAYER_ARN"
        echo "🔥 Ready to power your Lambda functions!"
        echo "⚡ Split into SIX focused layers for maximum efficiency!"
        echo ""
        echo "📝 To use these layers in your Lambda functions:"
        echo "   Layers:"
        echo "     - $CORE_IMAGE_LAYER_ARN"
        echo "     - $OPENCV_CORE_LAYER_ARN"
        echo "     - $ADVANCED_IMAGE_LAYER_ARN"
        echo "     - $ML_CORE_LAYER_ARN"
        echo "     - $DATA_VIZ_LAYER_ARN"
        echo "     - $GRAPHICS_RENDER_LAYER_ARN"
