name: Build Ultimate Badass Lambda Layer (Manual)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to build layer for (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      force_rebuild:
        description: 'Force rebuild even if layer exists'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  id-token: write

jobs:
  build-ultimate-layer:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Give it time to build the beast
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}

    - name: Install system dependencies (NUCLEAR OPTION)
      run: |
        echo "🚀 Installing system dependencies for ultimate layer..."
        sudo apt-get update
        sudo apt-get install -y \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libwebp-dev \
          libopenjp2-7-dev \
          libopenjp2-7 \
          libopencv-dev \
          libopencv-contrib-dev \
          libopenblas-dev \
          liblapack-dev \
          libatlas-base-dev \
          libgfortran5 \
          gfortran \
          libhdf5-dev \
          libhdf5-serial-dev \
          libprotobuf-dev \
          protobuf-compiler \
          libcairo2-dev \
          libpango1.0-dev \
          libgdk-pixbuf2.0-dev \
          libglib2.0-dev \
          libffi-dev \
          libssl-dev \
          libbz2-dev \
          liblzma-dev \
          libreadline-dev \
          libsqlite3-dev \
          libncurses5-dev \
          build-essential \
          cmake \
          pkg-config \
          libxml2-dev \
          libxslt1-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libx11-dev \
          libxext-dev \
          libxrender-dev \
          tcl-dev \
          tk-dev

    - name: Build Core Image Layer
      run: |
        echo "🔥 Building Core Image Layer (smallest)..."
        
        # Create build directory
        mkdir -p core-image-build
        cd core-image-build
        
        # Copy requirements
        cp ../layers/core-image/requirements.txt .
        
        # Install Python dependencies
        pip install --upgrade pip setuptools wheel
        echo "⚡ Installing core image dependencies..."
        pip install -r requirements.txt -t ./python/ --no-cache-dir
        
        # Create the layer zip
        echo "💥 Creating core image layer package..."
        zip -r core-image.zip python/
        
        # Get the size
        LAYER_SIZE=$(du -h core-image.zip | cut -f1)
        echo "🎯 CORE IMAGE LAYER BUILT! Size: $LAYER_SIZE"
        
        # Upload to S3
        aws s3 cp core-image.zip s3://urgd-applicationdata/stitch/layers/core-image.zip --region us-west-2
        
        echo "🚀 CORE IMAGE LAYER DEPLOYED TO S3!"

    - name: Build Computer Vision Layer
      run: |
        echo "🔥 Building Computer Vision Layer (medium)..."
        
        # Create build directory
        mkdir -p computer-vision-build
        cd computer-vision-build
        
        # Copy requirements
        cp ../layers/computer-vision/requirements.txt .
        
        # Install Python dependencies
        pip install --upgrade pip setuptools wheel
        echo "⚡ Installing computer vision dependencies..."
        pip install -r requirements.txt -t ./python/ --no-cache-dir
        
        # Create the layer zip
        echo "💥 Creating computer vision layer package..."
        zip -r computer-vision.zip python/
        
        # Get the size
        LAYER_SIZE=$(du -h computer-vision.zip | cut -f1)
        echo "🎯 COMPUTER VISION LAYER BUILT! Size: $LAYER_SIZE"
        
        # Upload to S3
        aws s3 cp computer-vision.zip s3://urgd-applicationdata/stitch/layers/computer-vision.zip --region us-west-2
        
        echo "🚀 COMPUTER VISION LAYER DEPLOYED TO S3!"

    - name: Build Data Science Layer
      run: |
        echo "🔥 Building Data Science Layer (largest)..."
        
        # Create build directory
        mkdir -p data-science-build
        cd data-science-build
        
        # Copy requirements
        cp ../layers/data-science/requirements.txt .
        
        # Install Python dependencies
        pip install --upgrade pip setuptools wheel
        echo "⚡ Installing data science dependencies..."
        pip install -r requirements.txt -t ./python/ --no-cache-dir
        
        # Create the layer zip
        echo "💥 Creating data science layer package..."
        zip -r data-science.zip python/
        
        # Get the size
        LAYER_SIZE=$(du -h data-science.zip | cut -f1)
        echo "🎯 DATA SCIENCE LAYER BUILT! Size: $LAYER_SIZE"
        
        # Upload to S3
        aws s3 cp data-science.zip s3://urgd-applicationdata/stitch/layers/data-science.zip --region us-west-2
        
        echo "🚀 DATA SCIENCE LAYER DEPLOYED TO S3!"

    - name: Publish Core Image Layer
      run: |
        # Create Core Image layer
        CORE_IMAGE_LAYER_ARN=$(aws lambda publish-layer-version \
          --layer-name urgd-core-image-${{ github.event.inputs.environment }} \
          --description "Core image processing and SVG tools - ${{ github.event.inputs.environment }}" \
          --content S3Bucket=urgd-applicationdata,S3Key=stitch/layers/core-image.zip \
          --compatible-runtimes python3.12 \
          --compatible-architectures x86_64 \
          --query 'LayerVersionArn' \
          --output text \
          --region us-west-2)
        
        echo "🎯 Core Image Layer ARN: $CORE_IMAGE_LAYER_ARN"
        echo "CORE_IMAGE_LAYER_ARN=$CORE_IMAGE_LAYER_ARN" >> $GITHUB_ENV

    - name: Publish Computer Vision Layer
      run: |
        # Create Computer Vision layer
        COMPUTER_VISION_LAYER_ARN=$(aws lambda publish-layer-version \
          --layer-name urgd-computer-vision-${{ github.event.inputs.environment }} \
          --description "Computer vision and advanced image processing - ${{ github.event.inputs.environment }}" \
          --content S3Bucket=urgd-applicationdata,S3Key=stitch/layers/computer-vision.zip \
          --compatible-runtimes python3.12 \
          --compatible-architectures x86_64 \
          --query 'LayerVersionArn' \
          --output text \
          --region us-west-2)
        
        echo "🎯 Computer Vision Layer ARN: $COMPUTER_VISION_LAYER_ARN"
        echo "COMPUTER_VISION_LAYER_ARN=$COMPUTER_VISION_LAYER_ARN" >> $GITHUB_ENV

    - name: Publish Data Science Layer
      run: |
        # Create Data Science layer
        DATA_SCIENCE_LAYER_ARN=$(aws lambda publish-layer-version \
          --layer-name urgd-data-science-${{ github.event.inputs.environment }} \
          --description "Data science and ML tools - ${{ github.event.inputs.environment }}" \
          --content S3Bucket=urgd-applicationdata,S3Key=stitch/layers/data-science.zip \
          --compatible-runtimes python3.12 \
          --compatible-architectures x86_64 \
          --query 'LayerVersionArn' \
          --output text \
          --region us-west-2)
        
        echo "🎯 Data Science Layer ARN: $DATA_SCIENCE_LAYER_ARN"
        echo "DATA_SCIENCE_LAYER_ARN=$DATA_SCIENCE_LAYER_ARN" >> $GITHUB_ENV

    - name: Output Layer Info
      run: |
        echo "🚀 ALL THREE LAMBDA LAYERS DEPLOYED!"
        echo "💪 Core Image Layer ARN: $CORE_IMAGE_LAYER_ARN"
        echo "💪 Computer Vision Layer ARN: $COMPUTER_VISION_LAYER_ARN"
        echo "💪 Data Science Layer ARN: $DATA_SCIENCE_LAYER_ARN"
        echo "🔥 Ready to power your Lambda functions!"
        echo "⚡ Split into THREE focused layers for maximum efficiency!"
        echo ""
        echo "📝 To use these layers in your Lambda functions:"
        echo "   Layers:"
        echo "     - $CORE_IMAGE_LAYER_ARN"
        echo "     - $COMPUTER_VISION_LAYER_ARN"
        echo "     - $DATA_SCIENCE_LAYER_ARN"
